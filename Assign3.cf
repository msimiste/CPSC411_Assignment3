rules Prog ::= Block;
 
rules Block ::= Declarations Program_body;
 
rules Declarations ::= Declaration ";" Declarations
 |;
 
rules Declaration ::= Var_declaration 
 | Fun_declaration;
 
rules Var_declaration ::= "var" Ident Array_dimensions ":" Type;
 
rules Type ::= "int"
 | "real"
 | "bool";
 
rules Array_dimensions ::= "[" Expr "]" Array_dimensions
 |;
 
rules Fun_declaration ::= "fun" Ident Param_list ":" Type "{" Fun_block "}";
 
rules Fun_block ::= Declarations Fun_body;
 
rules Param_list ::= "(" Parameters ")";
 
rules Parameters ::= Basic_declaration More_parameters
 |;
 
rules More_parameters ::= "," Basic_declaration More_parameters
 |;
 
rules Basic_declaration ::= Ident Basic_array_dimensions ":" Type;
 
rules Basic_array_dimensions ::= "[" "]" Basic_array_dimensions
 |;
 
rules Program_body ::= "begin" Prog_stmts "end";
 
rules Fun_body ::= "begin" Prog_stmts "return" Expr ";" "end";
 
rules Prog_stmts ::= Prog_stmt ";" Prog_stmts
 |;
 
rules Prog_stmt ::= "if" Expr "then" Prog_stmt "else" Prog_stmt
 | "while" Expr "do" Prog_stmt
 | "read" Identifier
 | Identifier ":=" Expr
 | "print" Expr
 | "{" Block "}";
 
rules Identifier ::= Ident Array_dimensions;
 
rules Expr ::= Expr "||" Bint_term
 | Bint_term;
 
rules Bint_term ::= Bint_term "&&" Bint_factor
 | Bint_factor;
 
rules Bint_factor ::= "not" Bint_factor
 | Int_expr Compare_op Int_expr
 | Int_expr;
 
rules Compare_op ::= "=" | "<" | ">" | "=<" |">=";
 
rules Int_expr ::= Int_expr Addop Int_term
 | Int_term;
 
rules Addop ::= "+" | "-";
 
rules Int_term ::= Int_term Mulop Int_factor
 | Int_factor;
 
rules Mulop ::= "*" | "/";
 
rules Int_factor ::= "(" Expr ")"
 | "size" "(" Ident Basic_array_dimensions ")"
 | "float" "(" Expr ")"
 | "floor" "(" Expr ")"
 | "ceil" "(" Expr ")"
 | Ident Modifier_list
 | IVAL
 | RVAL
 | BVAL
 | "-" Int_factor;
 
rules Modifier_list ::= "(" Arguments ")"
 | Array_dimensions;
 
rules Arguments ::= Expr More_arguments
 |;
 
rules More_arguments ::= "," Expr More_arguments
 |;

token IVAL digit+;

token RVAL digit* '.' digit+;

rules BVAL ::= "true" | "false";


comment "--" ;
comment "{-" "-}" ;