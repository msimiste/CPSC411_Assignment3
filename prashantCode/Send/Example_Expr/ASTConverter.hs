module ASTConverter where

-- Haskell module generated by the BNF converter

import Parser

data Expr =  Add Expr Expr
           | Mul Expr Expr
           | Num Integer
           deriving (Eq,Show)  

transE :: E -> Expr 
transE x = case x of
  PADD e t  -> Add (transE e) (transT t) 
  E1 t  -> transT t

transT :: T -> Expr
transT x = case x of
  PMul t f  -> Mul (transT t) (transF f)
  T2 f      -> transF f 

transF :: F -> Expr
transF x = case x of
  PInt n  -> (Num n) 



